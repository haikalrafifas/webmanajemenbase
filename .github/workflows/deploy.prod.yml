name: 🚀 Build and Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_and_push_image:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest

    steps:
    - name: 📦 Checkout Repository
      uses: actions/checkout@v3

    - name: 🔧 Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: 🏗️ Build and Push Image
      uses: docker/build-push-action@v5
      with:
        context: ./
        file: ./docker/app/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_PROJECT_ID }}:prod
        no-cache: true

  deploy_to_server:
    name: 🚀 Deploy to Server
    runs-on: ubuntu-latest
    needs: build_and_push_image

    steps:
    - name: 📄 Generate Secrets File
      uses: 0ndt/envfile@v2
      with:
        secrets: ${{ toJSON(secrets) }}
        exclude: DEPLOYMENT_*, STAGING_*, DEV_*
    
    - name: 📤 Upload Secrets Server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.DEPLOYMENT_HOST }}
        port: ${{ secrets.DEPLOYMENT_PORT }}
        username: ${{ secrets.DEPLOYMENT_USER }}
        key: |
          ${{ secrets.DEPLOYMENT_SSH_KEY }}
        source: ".env"
        target: "/opt/${{ secrets.DOCKER_PROJECT_ID }}/production"
    
    - name: 🔄 Deploy and Restart Container
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DEPLOYMENT_HOST }}
        port: ${{ secrets.DEPLOYMENT_PORT }}
        username: ${{ secrets.DEPLOYMENT_USER }}
        key: |
          ${{ secrets.DEPLOYMENT_SSH_KEY }}
        script: |
          cd /opt/${{ secrets.DOCKER_PROJECT_ID }}/production

          # Sync source code
          git fetch origin
          git reset --hard origin/main
          git clean -fd

          # Remove prefix on incoming secrets
          sed -i 's/^PRODUCTION_//g' .env

          # Compile secrets
          mv .env .env.remote && cp .env.example .env && echo >> .env && cat .env.remote >> .env && rm .env.remote

          # Re-run container (clean)
          docker-compose -p ${{ secrets.DOCKER_PROJECT_ID }}-prod up -d --force-recreate --pull always
          docker system prune -af

  run_migrations:
    name: 🧱 Run Laravel Commands
    runs-on: ubuntu-latest
    needs: deploy_to_server

    steps:
      - name: 📜 Run Re-cache App Config and Database Migrations on Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOYMENT_HOST }}
          port: ${{ secrets.DEPLOYMENT_PORT }}
          username: ${{ secrets.DEPLOYMENT_USER }}
          key: |
            ${{ secrets.DEPLOYMENT_SSH_KEY }}
          script: |
            cd /opt/${{ secrets.DOCKER_PROJECT_ID }}/production

            # Re-cache app configuration
            docker-compose -p ${{ secrets.DOCKER_PROJECT_ID }}-prod exec app php artisan config:clear
            docker-compose -p ${{ secrets.DOCKER_PROJECT_ID }}-prod exec app php artisan config:cache

            # Database migration
            docker-compose -p ${{ secrets.DOCKER_PROJECT_ID }}-prod exec app php artisan migrate --force
